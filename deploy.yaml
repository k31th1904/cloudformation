---
AWSTemplateFormatVersion: "2010-09-09"

#This template creates an environment for an application hosted in AWS that is highly available and scaleable. 
#VPC, subnets, NAT Gateway, route tables with entries, ASG with Launch Config, Load Balancer. 
#For input parameters, we'll need the key pair for private instances, and the instance type.

Parameters:
  PrivateKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to the instances.

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, m1.small, m1.large]
    Description: Select the desired instance type.

Mappings:
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-1ecae776
    us-east-2:
      AMI: ami-15e9c770
    us-west-1:
      AMI: ami-d114f295
    us-west-2:
      AMI: ami-e7527ed7
    eu-west-1:
      AMI: ami-a10897d6
    eu-central-1:
      AMI: ami-a8221fb5
    sa-east-1:
      AMI: ami-b52890a8
    ap-southeast-1:
      AMI: ami-68d8e93a
    ap-southeast-2:
      AMI: ami-fd9cecc7
    ap-northeast-1:
      AMI: ami-cbf90ecb

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: Lab VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: Public Subnet 1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
      - MyNAT
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNAT

  MyNAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "My NAT Gateway"

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServerSecurityGroup
        - Key: ResourceGroup
          Value: CloudFormationResource
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AmazonLinuxAMI, !Ref "AWS::Region", AMI]
      KeyName: !Ref PrivateKeyName
      InstanceType: !Ref InstanceTypeParameter
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize: "25"
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum -y install httpd php
          chkconfig httpd on
          wget https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-ARCHIT/v5.5.4/lab-2-ha/scripts/phpapp.zip
          unzip phpapp.zip -d /var/www/html/
          service httpd start
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - MyNAT
    Properties:
      VPCZoneIdentifier:
       - Ref: PrivateSubnet1
       - Ref: PrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs: [!Ref ALBTargetGroup]
      Tags:
        - Key: ApplicationRole
          Value: OurWebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: AppServer
          PropagateAtLaunch: "true"
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT10M

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: WebServerSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref AppLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALBTargetGroup
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

Outputs:
  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer.
    Value: !Join ["", ["http://", !GetAtt AppLoadBalancer.DNSName]]
